const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const router = express.Router();

const usersDB = {}; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è in-memory –±–∞–∑–∞

const SECRET = 'supersecretkey'; // –Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

function jsonResponse(message, data = null, status_code = 200, errors = null) {
    return {
        message,
        data,
        status_code,
        errors
    };
}

// üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
    const { email, password, name } = req.body;

    if (!email || !password) {
        return res.status(422).json(jsonResponse("ValidationError", [], 422, {
            email: email ? undefined : ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"],
            password: password ? undefined : ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"],
        }));
    }

    if (usersDB[email]) {
        return res.status(400).json(jsonResponse("UserExists", null, 400, {
            email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        }));
    }

    const hashed = await bcrypt.hash(password, 10);
    usersDB[email] = { email, password: hashed, name, role: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" };

    const token = jwt.sign({ email }, SECRET);
    res.json(jsonResponse("Registered", token));
});

// üîê –õ–æ–≥–∏–Ω
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(422).json(jsonResponse("ValidationError", [], 422, {
            email: email ? undefined : ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"],
            password: password ? undefined : ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"],
        }));
    }

    const user = usersDB[email];
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).json(jsonResponse("InvalidCredentials", null, 400, {
            auth: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        }));
    }

    const token = jwt.sign({ email }, SECRET);
    res.json(jsonResponse("LogedIn", token));
});

// üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user', (req, res) => {
    const auth = req.headers.authorization;
    if (!auth) {
        return res.status(401).json(jsonResponse("NotAuthenticated", [], 401, {
            auth: "Not authenticated"
        }));
    }

    try {
        const decoded = jwt.verify(auth, SECRET);
        const user = usersDB[decoded.email];
        if (!user) throw new Error();

        res.json(jsonResponse("UserInformation", {
            id: 1,
            name: user.name,
            email: user.email,
            role: {
                id: 1,
                name: user.role
            },
            permissions: []
        }));
    } catch (err) {
        res.status(401).json(jsonResponse("NotAuthenticated", [], 401, {
            auth: "Not authenticated"
        }));
    }
});

// üìß –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å
router.post('/forgot-password', (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(422).json(jsonResponse("ValidationError", [], 422, {
            email: ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ"]
        }));
    }

    if (!usersDB[email]) {
        return res.status(400).json(jsonResponse("InvalidEmail", null, 400, {
            email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }));
    }

    // –í –ø—Ä–æ–¥–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    res.json(jsonResponse("ResetLinkSent", "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"));
});

module.exports = router;
